package org.graalvm.vm.x86.substitution.libc;

import org.graalvm.vm.x86.AMD64Register;
import org.graalvm.vm.x86.ArchitecturalState;
import org.graalvm.vm.x86.RegisterAccessFactory;
import org.graalvm.vm.x86.isa.AMD64Instruction;
import org.graalvm.vm.x86.isa.CodeReader;
import org.graalvm.vm.x86.isa.Register;
import org.graalvm.vm.x86.isa.RegisterOperand;
import org.graalvm.vm.x86.node.MemoryReadNode;
import org.graalvm.vm.x86.node.RegisterReadNode;
import org.graalvm.vm.x86.node.RegisterWriteNode;
import org.graalvm.vm.x86.substitution.Substitution;
import org.graalvm.vm.x86.substitution.SubstitutionRegistry;

import com.oracle.truffle.api.frame.VirtualFrame;

// glibc 2.28-5 on Archlinux
public class Glibc228 {
    public static class Glibc228StrlenSse2 extends Substitution {
        private static final byte[] SIGNATURE = {(byte) 0xf3, 0x0f, 0x1e, (byte) 0xfa, 0x66, 0x0f, (byte) 0xef, (byte) 0xc0, 0x66, 0x0f, (byte) 0xef, (byte) 0xc9, 0x66, 0x0f, (byte) 0xef, (byte) 0xd2,
                        0x66, 0x0f, (byte) 0xef, (byte) 0xdb, 0x48, (byte) 0x89, (byte) 0xf8, 0x48, (byte) 0x89, (byte) 0xf9, 0x48, (byte) 0x81, (byte) 0xe1, (byte) 0xff, 0x0f, 0x00, 0x00, 0x48,
                        (byte) 0x81, (byte) 0xf9, (byte) 0xcf, 0x0f, 0x00, 0x00, 0x77, 0x66, (byte) 0xf3, 0x0f, 0x6f, 0x20, 0x66, 0x0f, 0x74, (byte) 0xe0, 0x66, 0x0f, (byte) 0xd7, (byte) 0xd4,
                        (byte) 0x85, (byte) 0xd2, 0x74, 0x04, 0x0f, (byte) 0xbc, (byte) 0xc2, (byte) 0xc3, 0x48, (byte) 0x83, (byte) 0xe0, (byte) 0xf0, 0x66, 0x0f, 0x74, 0x48, 0x10, 0x66, 0x0f, 0x74,
                        0x50, 0x20, 0x66, 0x0f, 0x74, 0x58, 0x30, 0x66, 0x0f, (byte) 0xd7, (byte) 0xd1, 0x66, 0x44, 0x0f, (byte) 0xd7, (byte) 0xc2, 0x66, 0x0f, (byte) 0xd7, (byte) 0xcb, 0x48,
                        (byte) 0xc1, (byte) 0xe2, 0x10, 0x48, (byte) 0xc1, (byte) 0xe1, 0x10, 0x4c, 0x09, (byte) 0xc1, 0x48, (byte) 0xc1, (byte) 0xe1, 0x20, 0x48, 0x09, (byte) 0xca, 0x48, (byte) 0x89,
                        (byte) 0xf9, 0x48, 0x31, (byte) 0xc1, 0x48, (byte) 0x83, (byte) 0xe0, (byte) 0xc0, 0x48, (byte) 0xd3, (byte) 0xfa, 0x48, (byte) 0x85, (byte) 0xd2, 0x74, 0x7e, 0x48, 0x0f,
                        (byte) 0xbc, (byte) 0xc2, (byte) 0xc3, 0x66, 0x0f, 0x1f, (byte) 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, (byte) 0x83, (byte) 0xe0, (byte) 0xc0, 0x66, 0x0f, 0x74, 0x00, 0x66,
                        0x0f, 0x74, 0x48, 0x10, 0x66, 0x0f, 0x74, 0x50, 0x20, 0x66, 0x0f, 0x74, 0x58, 0x30, 0x66, 0x0f, (byte) 0xd7, (byte) 0xf0, 0x66, 0x0f, (byte) 0xd7, (byte) 0xd1, 0x66, 0x44,
                        0x0f, (byte) 0xd7, (byte) 0xc2, 0x66, 0x0f, (byte) 0xd7, (byte) 0xcb, 0x48, (byte) 0xc1, (byte) 0xe2, 0x10, 0x48, (byte) 0xc1, (byte) 0xe1, 0x10, 0x48, 0x09, (byte) 0xf2, 0x4c,
                        0x09, (byte) 0xc1, 0x48, (byte) 0xc1, (byte) 0xe1, 0x20, 0x48, 0x09, (byte) 0xca, 0x48, (byte) 0x89, (byte) 0xf9, 0x48, 0x31, (byte) 0xc1, 0x48, (byte) 0x83, (byte) 0xe0,
                        (byte) 0xc0, 0x48, (byte) 0xd3, (byte) 0xfa, 0x48, (byte) 0x85, (byte) 0xd2, 0x74, 0x11, 0x48, 0x0f, (byte) 0xbc, (byte) 0xc2, (byte) 0xc3, 0x66, 0x66, 0x2e, 0x0f, 0x1f,
                        (byte) 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x90, 0x66, 0x0f, (byte) 0xef, (byte) 0xc9, 0x66, 0x0f, (byte) 0xef, (byte) 0xd2, 0x66, 0x0f, (byte) 0xef, (byte) 0xdb, 0x0f,
                        0x1f, 0x40, 0x00, 0x66, 0x0f, 0x6f, 0x40, 0x40, 0x66, 0x0f, (byte) 0xda, 0x40, 0x50, 0x66, 0x0f, (byte) 0xda, 0x40, 0x60, 0x66, 0x0f, (byte) 0xda, 0x40, 0x70, 0x66, 0x0f, 0x74,
                        (byte) 0xc3, 0x66, 0x0f, (byte) 0xd7, (byte) 0xd0, (byte) 0x85, (byte) 0xd2, 0x75, 0x30, 0x48, (byte) 0x83, (byte) 0xe8, (byte) 0x80, 0x66, 0x0f, 0x6f, 0x00, 0x66, 0x0f,
                        (byte) 0xda, 0x40, 0x10, 0x66, 0x0f, (byte) 0xda, 0x40, 0x20, 0x66, 0x0f, (byte) 0xda, 0x40, 0x30, 0x66, 0x0f, 0x74, (byte) 0xc3, 0x66, 0x0f, (byte) 0xd7, (byte) 0xd0,
                        (byte) 0x85, (byte) 0xd2, 0x75, 0x11, (byte) 0xeb, (byte) 0xbb, 0x66, 0x66, 0x2e, 0x0f, 0x1f, (byte) 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, (byte) 0x83, (byte) 0xc0, 0x40,
                        0x66, 0x0f, (byte) 0xef, (byte) 0xc0, 0x66, 0x0f, 0x74, 0x00, 0x66, 0x0f, 0x74, 0x48, 0x10, 0x66, 0x0f, 0x74, 0x50, 0x20, 0x66, 0x0f, 0x74, 0x58, 0x30, 0x66, 0x0f, (byte) 0xd7,
                        (byte) 0xf0, 0x66, 0x0f, (byte) 0xd7, (byte) 0xd1, 0x66, 0x44, 0x0f, (byte) 0xd7, (byte) 0xc2, 0x66, 0x0f, (byte) 0xd7, (byte) 0xcb, 0x48, (byte) 0xc1, (byte) 0xe2, 0x10, 0x48,
                        (byte) 0xc1, (byte) 0xe1, 0x10, 0x48, 0x09, (byte) 0xf2, 0x4c, 0x09, (byte) 0xc1, 0x48, (byte) 0xc1, (byte) 0xe1, 0x20, 0x48, 0x09, (byte) 0xca, 0x48, 0x0f, (byte) 0xbc,
                        (byte) 0xd2, 0x48, 0x01, (byte) 0xd0, 0x48, 0x29, (byte) 0xf8, (byte) 0xc3, 0x0f, 0x1f, 0x40, 0x00};

        public Glibc228StrlenSse2() {
            super(SIGNATURE);
        }

        private static class Strlen extends AMD64Instruction {
            @Child private RegisterReadNode readRSP;
            @Child private RegisterReadNode readRDI;
            @Child private RegisterWriteNode writeRSP;
            @Child private RegisterWriteNode writeRAX;
            @Child private MemoryReadNode readMemory;

            protected Strlen(long pc) {
                super(pc, SIGNATURE);
                setGPRReadOperands(new RegisterOperand(Register.RSP), new RegisterOperand(Register.RDI));
                setGPRWriteOperands(new RegisterOperand(Register.RSP), new RegisterOperand(Register.RAX));
            }

            @Override
            protected void createChildNodes() {
                ArchitecturalState state = getState();
                RegisterAccessFactory regs = state.getRegisters();
                AMD64Register rsp = regs.getRegister(Register.RSP);
                AMD64Register rax = regs.getRegister(Register.RAX);
                AMD64Register rdi = regs.getRegister(Register.RDI);
                readRSP = rsp.createRead();
                readRDI = rdi.createRead();
                writeRSP = rsp.createWrite();
                writeRAX = rax.createWrite();
                readMemory = state.createMemoryRead();
            }

            @Override
            public long executeInstruction(VirtualFrame frame) {
                long rsp = readRSP.executeI64(frame);
                long npc = readMemory.executeI64(rsp);
                writeRSP.executeI64(frame, rsp + 8);
                long start = readRDI.executeI64(frame);
                long ptr = start;
                while (readMemory.executeI8(ptr) != 0) {
                    ptr++;
                }
                writeRAX.executeI64(frame, ptr - start);
                return npc;
            }

            @Override
            public boolean isControlFlow() {
                return true;
            }

            @Override
            protected String[] disassemble() {
                return new String[]{"strlen"};
            }
        }

        @Override
        public AMD64Instruction createNode(long pc, CodeReader reader) {
            reader.check(SIGNATURE);
            return new Strlen(pc);
        }
    }

    public static void register(SubstitutionRegistry registry) {
        registry.register(new Glibc228StrlenSse2());
    }
}
